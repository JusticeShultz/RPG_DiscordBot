// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPG_Bot.Resources.Database;

namespace RPG_Bot.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20191116050913_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("RPG_Bot.Resources.Database.UserData", b =>
                {
                    b.Property<ulong>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("Age");

                    b.Property<uint>("AmountDonated");

                    b.Property<uint>("AngelPotionCount");

                    b.Property<uint>("Belt_Armor");

                    b.Property<uint>("Belt_Cost");

                    b.Property<uint>("Belt_Health");

                    b.Property<uint>("Belt_ModID");

                    b.Property<string>("Belt_Name");

                    b.Property<string>("Belt_Rarity");

                    b.Property<uint>("Belt_Regen");

                    b.Property<string>("Belt_URL");

                    b.Property<uint>("Boot_Armor");

                    b.Property<uint>("Boot_Cost");

                    b.Property<uint>("Boot_Health");

                    b.Property<uint>("Boot_ModID");

                    b.Property<string>("Boot_Name");

                    b.Property<string>("Boot_Rarity");

                    b.Property<uint>("Boot_Regen");

                    b.Property<string>("Boot_URL");

                    b.Property<uint>("Charisma");

                    b.Property<uint>("Chestplate_Armor");

                    b.Property<uint>("Chestplate_Cost");

                    b.Property<uint>("Chestplate_Health");

                    b.Property<uint>("Chestplate_ModID");

                    b.Property<string>("Chestplate_Name");

                    b.Property<string>("Chestplate_Rarity");

                    b.Property<uint>("Chestplate_Regen");

                    b.Property<string>("Chestplate_URL");

                    b.Property<string>("Class");

                    b.Property<uint>("CommonBoxCount");

                    b.Property<uint>("CurrentHealth");

                    b.Property<int>("DailyClaimed");

                    b.Property<uint>("Damage");

                    b.Property<int>("Day");

                    b.Property<uint>("Dexterity");

                    b.Property<uint>("DragonPotionCount");

                    b.Property<uint>("EpicBoxCount");

                    b.Property<uint>("EventBoxCount");

                    b.Property<uint>("EventItem1");

                    b.Property<uint>("EventItem2");

                    b.Property<uint>("EventItem3");

                    b.Property<uint>("Gauntlet_Armor");

                    b.Property<uint>("Gauntlet_Cost");

                    b.Property<uint>("Gauntlet_Health");

                    b.Property<uint>("Gauntlet_ModID");

                    b.Property<string>("Gauntlet_Name");

                    b.Property<string>("Gauntlet_Rarity");

                    b.Property<uint>("Gauntlet_Regen");

                    b.Property<string>("Gauntlet_URL");

                    b.Property<string>("GodChoice");

                    b.Property<uint>("GodlyBoxCount");

                    b.Property<uint>("GoldAmount");

                    b.Property<uint>("Health");

                    b.Property<uint>("Helmet_Armor");

                    b.Property<uint>("Helmet_Cost");

                    b.Property<uint>("Helmet_Health");

                    b.Property<uint>("Helmet_ModID");

                    b.Property<string>("Helmet_Name");

                    b.Property<string>("Helmet_Rarity");

                    b.Property<uint>("Helmet_Regen");

                    b.Property<string>("Helmet_URL");

                    b.Property<int>("Hour");

                    b.Property<uint>("LargePotionCount");

                    b.Property<uint>("LegendaryBoxCount");

                    b.Property<uint>("Legging_Armor");

                    b.Property<uint>("Legging_Cost");

                    b.Property<uint>("Legging_Health");

                    b.Property<uint>("Legging_ModID");

                    b.Property<string>("Legging_Name");

                    b.Property<string>("Legging_Rarity");

                    b.Property<uint>("Legging_Regen");

                    b.Property<string>("Legging_URL");

                    b.Property<uint>("Level");

                    b.Property<uint>("LoseCount");

                    b.Property<uint>("Luck");

                    b.Property<uint>("MediumPotionCount");

                    b.Property<int>("Minute");

                    b.Property<uint>("MythicBoxCount");

                    b.Property<string>("Name");

                    b.Property<string>("Rank");

                    b.Property<uint>("RareBoxCount");

                    b.Property<int>("Second");

                    b.Property<uint>("SkillPoints");

                    b.Property<uint>("SmallPotionCount");

                    b.Property<uint>("Stability");

                    b.Property<uint>("Stamina");

                    b.Property<uint>("Strength");

                    b.Property<uint>("UncommonBoxCount");

                    b.Property<uint>("VeryRareBoxCount");

                    b.Property<uint>("WinCount");

                    b.Property<uint>("XP");

                    b.HasKey("UserID");

                    b.ToTable("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
